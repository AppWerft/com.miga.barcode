/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package com.miga.barcode;

import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;

import org.appcelerator.titanium.TiApplication;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;

import android.app.Activity;

import com.google.android.gms.vision.MultiProcessor;
import com.google.android.gms.vision.Tracker;
import com.google.android.gms.vision.CameraSource;
import com.google.android.gms.vision.Detector;
import com.google.android.gms.vision.Frame;
import com.google.android.gms.vision.barcode.Barcode;
import com.google.android.gms.vision.barcode.BarcodeDetector;

import android.util.SparseArray;

@Kroll.module(name="TiBarcode", id="com.miga.barcode")
public class TiBarcodeModule extends KrollModule
{

	// Standard Debugging variables
	private static final String LCAT = "TiBarcodeModule";
	private static final boolean DBG = TiConfig.LOGD;

	private TiApplication appContext;
	private Activity activity;

	public TiBarcodeModule()
	{
		super();
		
		appContext = TiApplication.getInstance();
		activity = appContext.getCurrentActivity();
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app)
	{
		Log.d(LCAT, "inside onAppCreate");
		// put module init code that needs to run when the application is created
	}

	// Methods
	@Kroll.method
	public void example()
	{
		BarcodeDetector barcodeDetector = new BarcodeDetector.Builder(appContext).build();
		BarcodeTrackerFactory barcodeFactory = new BarcodeTrackerFactory();
		barcodeDetector.setProcessor(new MultiProcessor.Builder<>(barcodeFactory).build());

		CameraSource mCameraSource = new CameraSource.Builder(appContext, barcodeDetector)
		    .setFacing(CameraSource.CAMERA_FACING_BACK)
		    .setRequestedPreviewSize(1600, 1024)
		    .build();
	}
}
